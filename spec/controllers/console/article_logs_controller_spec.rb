require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Console::ArticleLogsController do

  def mock_article_log(stubs={})
    @mock_article_log ||= mock_model(Console::ArticleLog, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all console_article_logs as @console_article_logs" do
      Console::ArticleLog.stub(:all) { [mock_article_log] }
      get :index
      assigns(:console_article_logs).should eq([mock_article_log])
    end
  end

  describe "GET show" do
    it "assigns the requested article_log as @article_log" do
      Console::ArticleLog.stub(:find).with("37") { mock_article_log }
      get :show, :id => "37"
      assigns(:article_log).should be(mock_article_log)
    end
  end

  describe "GET new" do
    it "assigns a new article_log as @article_log" do
      Console::ArticleLog.stub(:new) { mock_article_log }
      get :new
      assigns(:article_log).should be(mock_article_log)
    end
  end

  describe "GET edit" do
    it "assigns the requested article_log as @article_log" do
      Console::ArticleLog.stub(:find).with("37") { mock_article_log }
      get :edit, :id => "37"
      assigns(:article_log).should be(mock_article_log)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created article_log as @article_log" do
        Console::ArticleLog.stub(:new).with({'these' => 'params'}) { mock_article_log(:save => true) }
        post :create, :article_log => {'these' => 'params'}
        assigns(:article_log).should be(mock_article_log)
      end

      it "redirects to the created article_log" do
        Console::ArticleLog.stub(:new) { mock_article_log(:save => true) }
        post :create, :article_log => {}
        response.should redirect_to(console_article_log_url(mock_article_log))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved article_log as @article_log" do
        Console::ArticleLog.stub(:new).with({'these' => 'params'}) { mock_article_log(:save => false) }
        post :create, :article_log => {'these' => 'params'}
        assigns(:article_log).should be(mock_article_log)
      end

      it "re-renders the 'new' template" do
        Console::ArticleLog.stub(:new) { mock_article_log(:save => false) }
        post :create, :article_log => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested article_log" do
        Console::ArticleLog.stub(:find).with("37") { mock_article_log }
        mock_console_article_log.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :article_log => {'these' => 'params'}
      end

      it "assigns the requested article_log as @article_log" do
        Console::ArticleLog.stub(:find) { mock_article_log(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:article_log).should be(mock_article_log)
      end

      it "redirects to the article_log" do
        Console::ArticleLog.stub(:find) { mock_article_log(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(console_article_log_url(mock_article_log))
      end
    end

    describe "with invalid params" do
      it "assigns the article_log as @article_log" do
        Console::ArticleLog.stub(:find) { mock_article_log(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:article_log).should be(mock_article_log)
      end

      it "re-renders the 'edit' template" do
        Console::ArticleLog.stub(:find) { mock_article_log(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested article_log" do
      Console::ArticleLog.stub(:find).with("37") { mock_article_log }
      mock_console_article_log.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the console_article_logs list" do
      Console::ArticleLog.stub(:find) { mock_article_log }
      delete :destroy, :id => "1"
      response.should redirect_to(console_article_logs_url)
    end
  end

end
